<?xml version="1.0" encoding="utf-8"?>
<!-- 
  NEXT Video Player
  Steffen Tiedemann Christensen, steffen@23company.com
-->
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:com="com.*" 
	xmlns:visual="com.visual.*"
	layout="absolute" 
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	usePreloader="false" 
	backgroundAlpha="0"
	width="100%" 
	height="100%" 
	applicationComplete="init();" 
	keyDown="trayShow()"
	>
 	<mx:Script source="Utility.as"></mx:Script>
 	<mx:Script source="Fullscreen.as"></mx:Script>
 	<mx:Script source="Identity.as"></mx:Script>
 	<mx:Script source="AppProperties.as"></mx:Script>
 	<mx:Script source="ActiveElement.as"></mx:Script>
 	<mx:Script source="doJSON.as"></mx:Script>
	<mx:Style>
		@font-face {
			src:url("assets/buttons/KlavikaMedium-TF.otf");
			fontFamily: KlavikaBold;
			advancedAntiAliasing: true;
		}
		Application {
			fontFamily: Helvetica;
		}
	</mx:Style>	<mx:Script>
		<![CDATA[
			import com.PlayerButton;
			import com.SmoothImage;
			import com.adobe.serialization.json.JSONParseError;
			import com.philemonworks.flex.util.HashCollection;
			import com.visual.VisualAds;
			
			import flash.display.StageDisplayState;
			import flash.external.ExternalInterface;
			import flash.utils.setInterval;
			import flash.utils.setTimeout;
			
			// Default domain (used when testing from localhost)
			private var defaultDomain:String = 'video.nextconf.eu';
			// Default photo_id (used to if you want a specific photo/video to be shown, otherwise empty)
			private var defaultPhotoId:String = '';
			private var defaultAlbumId:String = '';
			private var playerId:String = '4806534';

			private var context:Object = {};
			private var recommendations:Object = {};
			
			[Bindable] private var cleanVideoState:String = 'paused';
			[Bindable] private var applicationLoaded:Boolean = false;
			public var ads = null;
			public var forceHideTray:Boolean = false;
			
			public function init():void {
				prepareTimers();
				flash.system.Security.allowDomain('*');
				try {
					var objectID:String = new String(ExternalInterface.objectID);
					if (ExternalInterface.available && (objectID.length>0 && objectID!='null')) {
						ExternalInterface.addCallback('unloadVideoPlayer', function():void {unload();});
						ExternalInterface.addCallback('pauseVideo', function():void {pauseVideoElement();});
						ExternalInterface.addCallback('playVideo', function():void {playVideoElement();});
						ExternalInterface.addCallback('getPlayState', function():String {return(cleanVideoState);});
						ExternalInterface.addCallback('getPlayheadTime', function():Object {return(video.playheadTime + activeElement.getNumber('start'));});
						ExternalInterface.addCallback('setPlayheadTime', function(time:int):void {progress.seekVideoTo(time);});
						ExternalInterface.addCallback('getTotalTime', function():Object {return(video.totalTime);});
						ExternalInterface.addCallback('getCurrentPhotoID', function():Object {return(activeElement.get('photo_id'));});
						ExternalInterface.addCallback('getJSONSource', function():Object {return(props.get('jsonSource'));});
						ExternalInterface.addCallback('echo', function(x:Object):Object {return(x);});
					}
		        } catch (e:SecurityError) {} catch(e:Error) {}
				load();
			}
			public function unload():void {
				// This function is triggered via ExternalInterface and some JavaScript because Flex is useless.
				try {if(video.playing) video.pause();} catch(e:Error){}
				try {if(video.playing) reportPlay('end', video.playheadTime)} catch(e:Error){}
			}
			public function load():void {
				// Are we using a specific player, or just the default? (if so, we want to specify the player id to get the correct video settings)
				var testCustomPlayer:Array = new RegExp('/([0-9]+)\.swf').exec(FlexGlobals.topLevelApplication.url);
				if (testCustomPlayer && testCustomPlayer.length>1) playerId = testCustomPlayer[1]; 
				
				// Mash up embed parameters, including .swf?..., Flashvars, width and height to get a good embed code   
				var a:Array = []; var v:String;
				for (v in FlexGlobals.topLevelApplication.parameters) {a.push(encodeURIComponent(v) + '=' + encodeURIComponent(FlexGlobals.topLevelApplication.parameters[v]));}
				a.push('width=' + encodeURIComponent(FlexGlobals.topLevelApplication.width));
				a.push('height=' + encodeURIComponent(FlexGlobals.topLevelApplication.height));
				
				// Get settings for this player from 23 Video
				initLoadURL();
				doAPI('/api/player/settings', {player_id:(playerId?playerId:''), parameters:a.join('&')}, function(o:Object):void{
					initProperties(o.settings);
				});
				// Load content
				initActiveElement();
				doJSON((props.get('jsonSource') as String), function(o:Object):void{
					context=o; 
					build();
				});
			}
			public function build():void {
				if(!prioritizeLiveStreams && context && context.photos && context.photos.length>0) setActiveElement(0, false, props.getNumber('start'));
				
				trayShow();
				applicationLoaded = true;
			}
			
            private function trayShow():void {
		        tray.visible = true;
            }            
            private function trayHide():void {
                if(cleanVideoState!='paused' && !embedPanel.visible) tray.visible = false;
            }            
            private function prepareTimers():void {
				// Reset timer when the mouse moves in the application
				stage.addEventListener(Event.MOUSE_LEAVE, function():void {trayHide();});
				stage.addEventListener(MouseEvent.MOUSE_MOVE, function():void {trayShow();});
				
				// PLAY EVENTS
				// Report plays back to analytics continously
				setInterval(function():void{
						try {
							if(video.playing) reportPlay('start', video.playheadTime);
						}catch(e:ErrorEvent){}
					}, 30000);
            }             
            private function onPlayListDone():void {
				//
            }
			private function onVideoStateChange(evt:Event):void {
				if(evt.currentTarget.state==VideoEvent.PLAYING || evt.currentTarget.state==VideoEvent.SEEKING) {
					if(ads) ads.overlay();
					cleanVideoState = 'playing';
					embedPanel.visible = false;
				} else if(evt.currentTarget.state==VideoEvent.LOADING || evt.currentTarget.state==VideoEvent.BUFFERING) {
					cleanVideoState = 'buffering';
				} else if(evt.currentTarget.state==VideoEvent.DISCONNECTED || evt.currentTarget.state==VideoEvent.COMPLETE || evt.currentTarget.state==VideoEvent.PAUSED || evt.currentTarget.state==VideoEvent.STOPPED) {
					cleanVideoState = 'paused';
				}
                switch (evt.currentTarget.state) {
                	case VideoEvent.PAUSED:
						reportPlay('end', video.playheadTime);
						break;
                	case VideoEvent.PLAYING:
						image.visible = false;
						reportPlay('start', video.playheadTime);
                		break;
                    case VideoEvent.CONNECTION_ERROR:
                        displayError('Unable to connect to video');
                        break;
                }
            }
            private function onVideoComplete(ignoreIdentity:Boolean=false):void {
				reportPlay('end', video.playheadTime);
     			if(!ignoreIdentity) return(handleIdentity('after', function():void {onVideoComplete(true);}));
				onPlayListDone();
            }
            private function onTrayResize():void {
            	if(tray.visible) trayShow(); // if the tray is displayed and changes size, force a replacement
            	resizeProgressBar();
            }
            private function resizeProgressBar():void {
            	var x:int = progress.x = videoControls.width+ 8; 
            	progress.width = tray.width - rightPanel.width - x - 10; 
            }
		]]>
	</mx:Script>	
	
	<!-- Simple element to provide a backdrop when everything else fails -->
	<mx:Label id="errorContainer" 
		color="white"
		/>
	
	<mx:Canvas id="contentContainer"
		x="{props.getNumber('horizontalPadding')/2}"
		y="0"
		width="{FlexGlobals.topLevelApplication.width-props.getNumber('horizontalPadding')}"
		height="{FlexGlobals.topLevelApplication.height-props.getNumber('verticalPadding')}"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		>
	<!-- Click Container when wmode='direct' -->
	<mx:Canvas 
		top="0" right="0" bottom="0" left="0"
		click="if(video.playing) pauseVideoElement(); else playVideoElement();"
		/>
	<!-- Image and Video -->
	<visual:VisualVideo id="video"
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="10"
		width="100%"
		height="100%"
		click="if(video.playing) pauseVideoElement(); else playVideoElement();" 
		stateChange="onVideoStateChange(event);"
		complete="onVideoComplete();"
		/>
	<com:SmoothImage id="image" 
		source="{activeElement.get('photoSource')}" 
		width="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? video.height*(activeElement.get('aspectRatio') as Number) : contentContainer.width)}"
		height="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? contentContainer.height : contentContainer.width/(activeElement.get('aspectRatio') as Number))}"
		horizontalCenter="0" 
		verticalCenter="0"
		click="{playVideoElement()}" 
		/>
 	
	<!-- Extra displays for identity video and photo -->
	<visual:VisualVideo id="identityVideo" 
		visible="false" 
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="2" 
		width="{video.width}" 
		height="{video.height}"
		buttonMode="true"
		enableStageVideo="false"
		playheadUpdate="{var secs:int=Math.round(identityVideo.totalTime-identityVideo.playheadTime); var mess:String = (secs!=1 ? props.getString('identityCountdownTextPlural') : props.getString('identityCountdownTextSingular')); identityMessage.message = mess.replace(/%/, secs);}"
		/>
	<com:SmoothImage id="identityPhoto" 
		visible="false" 
		horizontalCenter="0" 
		verticalCenter="0" 
		maxWidth="{contentContainer.width}" 
		maxHeight="{contentContainer.height}" 
		buttonMode="true"
		/>
	<com:OverlayMessage id="identityMessage"
		fontFamily="{props.get('trayFont')}" 
		color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
		backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
		visible="{props.get('identityCountdown') &amp;&amp; identityVideo.visible}"
		allowClose="{props.get('identityAllowClose')}"
		close="{identityVideo.stop(); reportEvent(currentIdentityEvent=='after' ? 'postRollClose ' : 'preRollClose'); identityVideo.dispatchEvent(new Event('complete', true));}"
		/>
	<com:PlayerSubtitles id="subtitles"
		 width="{this.width}"
		 height="{this.height}"
		 x="0"
		 y="0"
		 targetVideo="{video}"
		 visible="{video.visible}"
		 design="{props.get('subtitlesDesign')}"
		 />

	<!-- Icon/Logo -->
	<mx:Image 
		source="@Embed(source='assets/buttons/next-logo.png')"
		top="20"
		left="20"
		/> 
		
	</mx:Canvas> 

	<mx:Canvas id="visualAdContainer" 
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off"
			   clipContent="true"
			   width="100%" 
			   height="{(tray.visible ? tray.y+(descriptions.visible?0:descriptions.height) : FlexGlobals.topLevelApplication.height)}" /> 
	<com:OverlayMessage id="adMessage"
			   fontFamily="{props.get('trayFont')}" 
			   color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
			   backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
			   allowClose="{props.get('identityAllowClose')}"
			   visible="false"
			   />

	<!-- Tray -->
	<mx:Canvas id="tray"
	 	bottom="6"
	  	left="2"
	   	right="8"
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		resize="onTrayResize();" 
		horizontalCenter="0"
		visible="false"
		hideEffect="{fadeOut}"
		showEffect="{fadeIn}"
		>
		<mx:VBox 
			verticalGap="6"
			>
			<mx:HBox width="100%" paddingLeft="2" paddingRight="4">
			<mx:HBox id="descriptions" 
				horizontalScrollPolicy="off" 
				verticalScrollPolicy="off" 
				color="#00A1E7" 
				backgroundColor="white" 
				backgroundAlpha="0.8"
				paddingLeft="17"
				paddingRight="0"
				width="100%"
				visible="{cleanVideoState=='paused' &amp;&amp; !embedPanel.visible &amp;&amp; !formatsMenu.visible &amp;&amp; !volumeMenu.visible}"
				hideEffect="{fadeOut}"
				showEffect="{fadeIn}"
				>
				<!-- Title and Words -->
				<mx:VBox id="descBg" 
					horizontalCenter="0" 
					verticalCenter="0" 
					verticalGap="0" 
					width="100%" 
					paddingTop="22" 
					paddingBottom="20" 
					paddingLeft="6" 
					paddingRight="6"
					>
					<mx:Label id="trayTitle" 
						text="{activeElement.get('title')}" 
						truncateToFit="true" 
						maxWidth="{FlexGlobals.topLevelApplication.width}" 
						updateComplete="trayTitle.visible = (trayTitle.text.length>0);" 
						fontSize="23" 
						fontFamily="KlavikaBold"
						/>
					<mx:Text id="trayContent"
						paddingTop="5"
						fontSize="16" 
						fontFamily="KlavikaBold"
						htmlText="{activeElement.get('content')}" 
						truncateToFit="true" 
						maxWidth="{FlexGlobals.topLevelApplication.width}" 
						updateComplete="trayContent.visible = (trayContent.text.length>0);" 
						/>
				</mx:VBox>
				
				<!-- Big Play -->
				<mx:VBox
					paddingLeft="40"
					paddingRight="40"
					paddingTop="20"
					paddingBottom="20"
					height="100%"
					>
					<mx:Image id="bigPlayImage" 
							  source="@Embed(source='assets/buttons/bigplay.png')"
							  verticalCenter="0" 
							  horizontalCenter="0"
							  visible="{(applicationLoaded &amp;&amp; (props.get('showBigPlay') as Boolean) &amp;&amp; cleanVideoState=='paused' &amp;&amp; !identityVideo.playing)}" 
							  click="playVideoElement()"
							  />
				</mx:VBox>
			</mx:HBox>
			</mx:HBox>
			
			<mx:HBox id="controlBox">
				<mx:Canvas 
					width="{tray.width}">
					<!-- Play and Pause -->
					<mx:HBox id="videoControls" 
						bottom="2" 
						top="2" 
						left="2" 
						width="{playImage.width}"
						hasFocusableChildren="true"
						resize="resizeProgressBar();">
			    		<com:PlayerButton id="playImage" 
			    			imageSource="@Embed(source='assets/buttons/play.png')"
							overSource="@Embed(source='assets/buttons/play-over.png')"
			    			visible="{(cleanVideoState=='paused' &amp;&amp; !identityVideo.visible)}" 
			    			click="playVideoElement()"
			    			/>
			    		<com:PlayerButton id="pauseImage" 
			    			imageSource="@Embed(source='assets/buttons/pause.png')"
							overSource="@Embed(source='assets/buttons/pause-over.png')"
			    			visible="{(cleanVideoState=='playing' &amp;&amp; !identityVideo.visible)}" 
			    			click="pauseVideoElement()"
			    			/>
			    		<com:PlayerButton id="bufferImage"  
			    			imageSource="@Embed(source='assets/buttons/pause.png')"
							overSource="@Embed(source='assets/buttons/pause-over.png')"
			    			visible="{(cleanVideoState=='buffering' &amp;&amp; !identityVideo.visible)}"
							click="pauseVideoElement()"
			    			/>  
			    	</mx:HBox>					
						
					<!-- Progress bar -->
					<com:PlayerProgress id="progress"
						y="12"
						targetVideo="{video}"
						visible="{!activeElement.getBoolean('live') &amp;&amp; !identityVideo.visible}"
						/>

					<!-- Right Panel -->
			    	<mx:HBox id="rightPanel" 
			    		visible="true" 
			    		bottom="2" 
			    		top="2" 
			    		right="2" 
			    		horizontalGap="2" 
			    		resize="resizeProgressBar();"
			    		> 

						<!-- Mute and Unmute -->
						<com:PlayerButton id="muteImage"
										  imageSource="@Embed(source='assets/buttons/mute.png')"
										  overSource="@Embed(source='assets/buttons/mute-over.png')"
										  activated="{volumeMenu.visible}"
										  click="embedPanel.visible = false;"
										  >
							<com:VolumeMenu
								hideEffect="{fadeOut}"
								showEffect="{fadeIn}"
								id="volumeMenu"
								video="{video}"
								/>
						</com:PlayerButton>
						
					    <!-- HDbutton-->
			    		<com:PlayerButton id="hdBtn" 
			    			imageSource="@Embed(source='assets/buttons/hd.png')"
							overSource="@Embed(source='assets/buttons/hd-over.png')"
							visible="false"
							activated="{formatsMenu.visible}"
							click="embedPanel.visible = false;"
			    			>
							<com:PlayerMenu 
								hideEffect="{fadeOut}"
								showEffect="{fadeIn}"
								id="formatsMenu"
								value="{currentVideoFormat}"
								change="{switchVideoFormat(new String(formatsMenu.value));}"
								/>
						</com:PlayerButton>

						<!-- Fullscreen -->
			    		<com:PlayerButton id="fullscreenImage" 
			    			imageSource="@Embed(source='assets/buttons/fullscreen.png')"
							overSource="@Embed(source='assets/buttons/fullscreen-over.png')"
			    			click="toggleFullScreen()"
			    			/>

						<!-- FeedPanel -->
			    		<com:PlayerButton id="feedpanelBtn" 
			    			imageSource="@Embed(source='assets/buttons/share.png')"
							overSource="@Embed(source='assets/buttons/share-over.png')"
			    			visible="{(props.get('showShare') as Boolean)}" 
			    			click="embedPanel.visible=props.get('showShare') &amp;&amp; !embedPanel.visible;"
			    			/>
					</mx:HBox>
				</mx:Canvas>
			</mx:HBox>
		</mx:VBox>
	</mx:Canvas>
	
	<!-- Embed panel -->
	<mx:Canvas id="embedPanel" 
		backgroundImage="@Embed(source='assets/buttons/share-background.png')"
		width="611"
		height="252"
		right="13"
		bottom="33"
		visible="false"
		show="{reportEvent('shareEngaged');}"
		hideEffect="{fadeOut}"
		showEffect="{fadeIn}"
		>
		<mx:Image
			buttonMode="true"
			useHandCursor="true"
			right="10"
			top="10"
			source="@Embed(source='assets/buttons/close.png')"
			click="{embedPanel.visible=false}"
			/>
		<mx:TextArea id="embedText"
			text="{props.get('currentVideoEmbedCode')}" 
			click="{reportEvent('embedEngaged'); embedText.setFocus(); embedText.selectionBeginIndex = 0; embedText.selectionEndIndex = embedText.text.length;}" 
			color="#333" 
			fontSize="11"
			paddingTop="7"
			paddingLeft="7"
			borderStyle="none"
			backgroundAlpha="0"
			width="475"
			height="29"
			left="19"
			top="67"
			/>
		<com:PlayerButton
			imageSource="@Embed(source='assets/buttons/copy.png')"
			overSource="@Embed(source='assets/buttons/copy-over.png')"
			width="100"
			height="31"
			click="{reportEvent('embedEngaged'); System.setClipboard(embedText.text);}"
			x="503"
			y="67"
			/>

		<!-- Share section -->		
		<mx:VBox
			verticalGap="9"
			x="25"
			y="127"
			>
			<mx:HBox 
				horizontalGap="74"
				>
				<com:PlayerButton
					imageSource="@Embed(source='assets/buttons/facebook.png')"
					overSource="@Embed(source='assets/buttons/facebook-over.png')"
					click="{goToUrl(activeElement.get('link') + '/facebook?player_id=' + props.get('player_id'))}"
					width="100"
					height="31"
					/>
				<com:PlayerButton
					imageSource="@Embed(source='assets/buttons/rss.png')"
					overSource="@Embed(source='assets/buttons/rss-over.png')"
					click="{goToUrl(props.get('rssLink') as String)}"
					width="100"
					height="31"
					/>
				<com:PlayerButton
					imageSource="@Embed(source='assets/buttons/mail.png')"
					overSource="@Embed(source='assets/buttons/mail-over.png')"
					click="{goToUrl(props.get('mailLink') as String)}"
					width="100"
					height="31"
					/>
			</mx:HBox>
			<mx:HBox
				horizontalGap="74"
				>
				<com:PlayerButton
					imageSource="@Embed(source='assets/buttons/twitter.png')"
					overSource="@Embed(source='assets/buttons/twitter-over.png')"
					click="{goToUrl(activeElement.get('link') + '/twitter?player_id=' + props.get('player_id'))}"
					width="100"
					height="31"
					/>
				<com:PlayerButton
					imageSource="@Embed(source='assets/buttons/podcast.png')"
					overSource="@Embed(source='assets/buttons/podcast-over.png')"
					click="{goToUrl(props.get('podcastLink') as String)}"
					width="100"
					height="31"
					/>
			</mx:HBox>
		</mx:VBox> 
	</mx:Canvas>
	<!-- /Embed panel -->

	<!-- Text panel for post-roll html identity text -->
	<com:TextPanel id="identityPanel" 
		backgroundColor="{(styleManager.getColorName(props.get('backgroundColor')) as Number)}"
		>
		<mx:TextArea id="identityPanelText"
			width="100%"
			height="{(this.height-100)*0.9}" 
			backgroundAlpha="0" 
			borderStyle="none"
			fontSize="12" 
			editable="false" 
			color="white"
			paddingTop="10" 
			paddingBottom="20"
			click="{reportEvent('callToActionClick');}"
			/>
	</com:TextPanel> 
	<!-- / Text panel for post-roll -->
	
	<mx:Fade
		id="fadeOut"
		alphaFrom="1"
		alphaTo="0"
		duration="400"
		/>
	<mx:Fade
		id="fadeIn"
		alphaFrom="0"
		alphaTo="1"
		duration="200"
		/>
</mx:Application>
