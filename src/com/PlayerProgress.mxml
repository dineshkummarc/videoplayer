<?xml version="1.0" encoding="utf-8"?>                                                                                                                                    
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalScrollPolicy="off" 
	verticalScrollPolicy="off"
	useHandCursor="true" 
	buttonMode="true" 
	height="5"
	mouseOver="videoDragHandle.visible=true" 
	mouseOut="videoDragHandle.visible=false" 
	click="seekVideoTo(timeFromPoint(this.contentMouseX));" 
	initialize="init()"
	clipContent="false"
	>
	<!-- VideoProgress -->
	<mx:Canvas id="videoProgress"
		height="5"
		width="100%"
		resize="drawSections();"
		backgroundColor="white" 
		>
		<mx:Canvas id="videoBufferProgress" 
			height="5" 
			backgroundColor="#00A1E7" 
			backgroundAlpha="0.2" 
			/>
		<mx:Canvas id="videoPlayProgress" 
			height="5" 
			backgroundColor="#00A1E7" 
			/>
	</mx:Canvas>					

	<!-- Sections -->
	<mx:Canvas id="sectionContainer" top="0" left="0" width="100%" height="100%" horizontalScrollPolicy="off"></mx:Canvas>
	
	<!-- videoTime -->
	<mx:Canvas id="videoDragHandle"
	    width="50"
		height="34"
		visible="false" 
		y="-29"
		x="-25"
		useHandCursor="true"
		buttonMode="true"
		backgroundImage="@Embed(source='assets/buttons/time.png')"
		>
		<mx:Label id="videoTimeLabel"
			selectable="false" 
			fontFamily="Helvetica, Arial" 
			fontSize="11" 
			color="#00A1E7"
			top="4"
			horizontalCenter="0"
			text="0:00"
			/>
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import com.philemonworks.flex.util.HashCollection;
			
			import com.visual.VisualVideo;
			import mx.core.Application;
			import mx.events.VideoEvent;
			[bindable] private var props:HashCollection = mx.core.FlexGlobals.topLevelApplication.props;
			[bindable] private var activeElement:HashCollection = mx.core.FlexGlobals.topLevelApplication.activeElement;

			var scrubberStartX:int = -1;
			var scrubberStartMouseX:int = -1;
			private function init():void {
				this.addEventListener(MouseEvent.MOUSE_MOVE, function(e:MouseEvent){
					if(scrubberStartMouseX<0) return;
					videoDragHandle.x = scrubberStartX + (e.stageX-scrubberStartMouseX);
					var x = scrubberStartX + (e.stageX-scrubberStartMouseX);
					videoTimeLabel.text = formatTime(timeFromPoint(x));
				});
				this.addEventListener(MouseEvent.MOUSE_UP, function(e:MouseEvent){
					if(scrubberStartMouseX<0) return;
					scrubberStartMouseX = scrubberStartX = -1;
					var x = scrubberStartX + (e.stageX-scrubberStartMouseX);
					seekVideoTo(timeFromPoint(x));
				});
				videoDragHandle.addEventListener(MouseEvent.MOUSE_DOWN, function(e:MouseEvent){
					scrubberStartX = videoDragHandle.x;
					scrubberStartMouseX = e.stageX;
				});
			}

			// Component-specific functions and event-handlers
			private function formatTime(time:int, totalTime:int = -1, join:String = ' / '):String {
				if (time<0||isNaN(time)) time = 0;
				if (totalTime>=0) {
					return(Math.floor(time/60).toString() +':'+ (time%60<10?'0':'') + Math.round(time%60).toString() + join + Math.floor(totalTime/60).toString() +':'+ (totalTime%60<10?'0':'') + Math.round(totalTime%60).toString());
				} else {
					return(Math.floor(time/60).toString() +':'+ (time%60<10?'0':'') + Math.round(time%60).toString());
				}
			}
			private function timeFromPoint(x:int):int {
				return Math.round(x/videoProgress.width*activeElement.getNumber('length'));
			}
            public function seekVideoTo(time:int):void {
            	if(!_targetVideo) return;
            	if(time>activeElement.getNumber('length')) return;
            	var approxBufferTime:Number = (_targetVideo.totalTime * (_targetVideo.bytesLoaded/_targetVideo.bytesTotal)) + activeElement.getNumber('start');
        		_targetVideo.bufferTime = 2; // default buffer time is two secs
            	if(time>new Number(activeElement.get('start')) && time<approxBufferTime) {
            		_targetVideo.playheadTime = time-activeElement.getNumber('start');
            		if(!_targetVideo.playing) this.parentApplication.playVideoElement();
            	} else {
            		if ((props.get('streaming') as Boolean)) {
            			activeElement.put('start', Math.floor(time));
            			activeElement.put('skip', '1');
            			_targetVideo.bufferTime = 0; // when skipping we'll skip the buffer
						if(_targetVideo.playing) _targetVideo.stop();
            			_targetVideo.source = getFullVideoSource();
						this.parentApplication.playVideoElement();
            		}
            	}
            }
            private function updateBuffer(e:Event):void {
            	if(!_targetVideo) return;
            	videoBufferProgress.x = activeElement.getNumber('start') / activeElement.getNumber('length') * videoProgress.width;
            	videoBufferProgress.width = _targetVideo.bytesLoaded/_targetVideo.bytesTotal*(videoProgress.width-videoBufferProgress.x);
            }
            private function updatePlay(e:Event):void {
            	if(!_targetVideo) return;
				videoPlayProgress.x = activeElement.getNumber('start') / activeElement.getNumber('length') * videoProgress.width;
				videoPlayProgress.width  = _targetVideo.playheadTime/_targetVideo.totalTime*(videoProgress.width-videoPlayProgress.x);
				if(scrubberStartMouseX<0) {
					videoDragHandle.x = videoPlayProgress.x + videoPlayProgress.width - (videoDragHandle.width/2);
					videoTimeLabel.text = formatTime(_targetVideo.playheadTime + activeElement.getNumber('start'));
				}
            }

			private function getFullVideoSource():String {
				return(activeElement.getString('videoSource') + '?start=' + encodeURIComponent(activeElement.getString('start')) + '&skip=' + encodeURIComponent(activeElement.getString('skip')));
			}            
            		

			// Which video display are we binding to? (and attach to events)
			private var _targetVideo:VisualVideo;
			public function set targetVideo(v:VisualVideo):void {
				_targetVideo = v;
				v.addEventListener(VideoEvent.PLAYHEAD_UPDATE, updatePlay);
				v.addEventListener(ProgressEvent.PROGRESS, updateBuffer);
			}
			public function get targetVideo():VisualVideo {return(_targetVideo);}
			
			private var _sections:Array = [];
			public function setSections(s:Array):void{
				_sections = s;
				drawSections();
			}			
			private function drawSections():void{
				// Clear current objects
				sectionContainer.removeAllChildren();
				// Add new ones
				for (var i:int=0; i<_sections.length; i++) {
					var s:Object = _sections[i];
					var section:PlayerProgressSection = new com.PlayerProgressSection;
					
					// Position section indicator
					section.labelBackgroundColor = (styleManager.getColorName(props.get('trayBackgroundColor')) as Number);
					section.labelAlpha = props.getNumber('trayAlpha');
					section.labelFontSize = (props.getNumber('trayTitleFontSize') || 12)-2; 
					section.labelFontWeight = props.getString('trayTitleFontWeight'); 
					
					section.width = 12;
					section.height = 12;
					section.y = 8;
					section.x = 8 + ((s.start_time/activeElement.getNumber('length')) * videoProgress.width);
					section.title = s.title;
					section.startTime = s.start_time;
					
					// Listen to clicks
					section.addEventListener(MouseEvent.CLICK, function(e:Event):void{
						e.stopPropagation();
						seekVideoTo(e.currentTarget.startTime);
					});
					
					// Add to progress bar
					sectionContainer.addChild(section);
				}
			}
		]]>
	</mx:Script>	
</mx:Canvas>
