<?xml version="1.0" encoding="utf-8"?>                                                                                                                                    
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalScrollPolicy="off" 
	verticalScrollPolicy="off"
	useHandCursor="true" 
	buttonMode="true"
	x="50"
	height="76"
	width="290"
	click="seekVideoTo(timeFromPoint(this.contentMouseX));" 
	initialize="init()"
	>

	<mx:Script>
		<![CDATA[
			[Bindable] public var showTime:Boolean = true;
		]]>
	</mx:Script>
		
	
	<mx:Image 
		source="@Embed(source='assets/buttons/progress.png')"
		x="0"
		y="22"
		/>
	
	<!-- Video Grid -->
	<mx:HBox 
		id="videoGrid" 
		top="30" 
		x="29"  
		width="240" 
		height="16" 
		horizontalGap="0" 
		/>

	<!-- VideoProgress -->
	<mx:Canvas id="videoProgress"
		top="30" 
		x="29"  
		height="16"
		width="240"
		>
		<mx:Canvas id="videoBufferProgress" 
			x="0" 
			height="16"
			backgroundImage="@Embed(source='assets/buttons/buffer.png')"
			borderStyle="solid"
			borderThickness="0"
			cornerRadius="2" 
			/>
		<mx:Canvas id="videoPlayProgress" 
			x="0"
			height="16"
			/>
	</mx:Canvas>					

	<mx:Label 
		top="29"
		left="32"
		selectable="false" 
		fontFamily="Verdana, Helvetica, Arial" 
		fontSize="11" 
		color="white"
		text="0:00"
		/>
	<mx:Label 
		id="totalTimeLabel"
		top="29"
		right="22"
		selectable="false" 
		fontFamily="Verdana, Helvetica, Arial" 
		fontSize="11" 
		color="white"
		/>
	
	<!-- videoTime -->
	<mx:Canvas id="videoDragHandle"
		x="5"
		top="20"
		width="50"
		height="56"
		clipContent="false"
		useHandCursor="true"
		buttonMode="true"
		visible="false"
		>
		<mx:Canvas
			width="2"
			height="36"
			backgroundColor="#d32128"
			horizontalCenter="0"
			/>
		<mx:Label id="videoTimeLabel"
			top="{showTime ? 36 : -15}"
			selectable="false" 
			fontFamily="Verdana, Helvetica, Arial" 
			fontSize="10" 
			color="black"
			horizontalCenter="0"
			/>
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import com.philemonworks.flex.util.HashCollection;
			import com.visual.VisualVideo;
			
			import mx.core.Application;
			import mx.events.VideoEvent;
			[bindable] private var props:HashCollection = mx.core.FlexGlobals.topLevelApplication.props;
			[bindable] private var activeElement:HashCollection = mx.core.FlexGlobals.topLevelApplication.activeElement;
			
			private var _photos:Array = [];
			[Bindable] private var totalPlaylistLength:int = 1;
			public function set photos(p:Array) {
				_photos = p;
				
				for (var i:int = 0; i<_photos.length; i++) {
					totalPlaylistLength += new Number(_photos[i].video_length);
				}
				totalTimeLabel.text = formatTime(totalPlaylistLength);
			}

			var scrubberStartX:int = -1;
			var scrubberStartMouseX:int = -1;
			private function init():void {
				this.addEventListener(MouseEvent.MOUSE_MOVE, function(e:MouseEvent){
					if(scrubberStartMouseX<0) return;
					var x = scrubberStartX + (e.stageX-scrubberStartMouseX);
					videoDragHandle.x = Math.min(Math.max(x,5),245);
					videoTimeLabel.text = formatTime(timeFromPoint(videoDragHandle.x + 1 + Math.floor(videoDragHandle.width/2.0)));
				});
				this.addEventListener(MouseEvent.MOUSE_UP, function(e:MouseEvent){
					if(scrubberStartMouseX<0) return;
					scrubberStartMouseX = scrubberStartX = -1;
					seekVideoTo(timeFromPoint(videoDragHandle.x + Math.floor(videoDragHandle.width/2.0)));
				});
				videoDragHandle.addEventListener(MouseEvent.MOUSE_DOWN, function(e:MouseEvent){
					scrubberStartX = videoDragHandle.x;
					scrubberStartMouseX = e.stageX;
				});
			}

			// Component-specific functions and event-handlers
			private function formatTime(time:int, totalTime:int = -1, join:String = ' / '):String {
				if (time<0) return("");
				if (totalTime>=0) {
					return([formatTime(time), formatTime(totalTime)].join(join));
				} else {
					var hours = Math.floor(time/3600);
					time -= hours*3600;
					return((hours>0 ? hours + ':' : '') + Math.floor(time/60).toString() +':'+ (time%60<10?'0':'') + Math.round(time%60).toString());
				}
			}
			private function timeFromPoint(x:int):int {
				return Math.round((x-29)/240*totalPlaylistLength);
			}
            public function seekVideoTo(time:int):void {
            	if(!_targetVideo) return;
            	if(time>totalPlaylistLength) return;
            	var approxBufferTime:Number = (_targetVideo.totalTime * (_targetVideo.bytesLoaded/_targetVideo.bytesTotal)) + activeElement.getNumber('offset');
        		_targetVideo.bufferTime = 2; // default buffer time is two secs

				var offset:Number = 0; 
				for (var i:int = 0; i<this.parentApplication.context.photos.length; i++) {
					offset += new Number(this.parentApplication.context.photos[i].video_length);
					if(offset>time) {
						if(_targetVideo.playing) _targetVideo.stop();
						// Skip to clip, but don't play yet
						this.parentApplication.setActiveElement(i, false);
						// Set start time
						activeElement.put('start', time-(offset-this.parentApplication.context.photos[i].video_length));
						activeElement.put('skip', '1');
						// Update source, then play
						_targetVideo.source = getFullVideoSource();
						this.parentApplication.playVideoElement();
						break;
					}
				}
            }
			private function updateProgressCanvas():void {
				videoProgress.x = 29 + (activeElement.getNumber('offset')/totalPlaylistLength * 240);
				videoProgress.width = activeElement.getNumber('length')/totalPlaylistLength * 240;
			}
            private function updateBuffer(e:Event):void {
            	if(!_targetVideo) return;
				updateProgressCanvas();
				videoBufferProgress.x = activeElement.getNumber('start') / activeElement.getNumber('length') * videoProgress.width;
				videoBufferProgress.width = _targetVideo.bytesLoaded/_targetVideo.bytesTotal*(videoProgress.width-videoBufferProgress.x);
            }
            private function updatePlay(e:Event):void {
            	if(!_targetVideo) return;
				updateProgressCanvas();
				videoPlayProgress.x = activeElement.getNumber('start') / activeElement.getNumber('length') * videoProgress.width;
				videoPlayProgress.width = _targetVideo.playheadTime/_targetVideo.totalTime*(videoProgress.width-videoPlayProgress.x);
				videoDragHandle.visible = true;
				if(scrubberStartMouseX<0 && e.currentTarget.state==VideoEvent.PLAYING) {
					videoDragHandle.x = videoProgress.x + videoPlayProgress.x + videoPlayProgress.width - (videoDragHandle.width/2);
					videoTimeLabel.text = formatTime(_targetVideo.playheadTime + activeElement.getNumber('start') + activeElement.getNumber('offset'));
				}
            }

			private function getFullVideoSource():String {
				return(activeElement.getString('videoSource') + '?start=' + encodeURIComponent(activeElement.getString('start')) + '&skip=' + encodeURIComponent(activeElement.getString('skip')));
			}            
            		

			// Which video display are we binding to? (and attach to events)
			private var _targetVideo:VisualVideo;
			public function set targetVideo(v:VisualVideo):void {
				_targetVideo = v;
				v.addEventListener(VideoEvent.PLAYHEAD_UPDATE, updatePlay);
				v.addEventListener(ProgressEvent.PROGRESS, updateBuffer);
			}
			public function get targetVideo():VisualVideo {return(_targetVideo);}
			
			public function placeGrid():void {
				videoGrid.removeAllChildren();
				for (var i:int = 0; i<this.parentApplication.context.photos.length-1; i++) {
					var g:Canvas = new mx.containers.Canvas;
					g.height = 16;
					g.width = (new Number(this.parentApplication.context.photos[i].video_length) / totalPlaylistLength * 240);
					g.setStyle('borderThickness', '1');
					g.setStyle('borderColor', '#777777');
					g.setStyle('borderStyle', 'solid');
					g.setStyle('borderSides', 'right');
					videoGrid.addChild(g);
				}
			}
			
			private var _sections:Array = [];
		]]>
	</mx:Script>	
</mx:Canvas>
